-- Â© 2010 David Given.
-- LBW is licensed under the MIT open source license. See the COPYING
-- file in this distribution for the full text.
--
-- $Id: pmfile 168 2010-02-06 23:09:14Z dtrg $
-- $URL: https://wordgrinder.svn.sf.net/svnroot/wordgrinder/wordgrinder/pmfile $

include "tools/c.pm"

HOME = os.getenv("HOME")
VERSION = "0.1"

MAKENSIS = '/dev/fs/C/Program\ Files/NSIS/makensis.exe'


CBUILDFLAGS = {
	'-Wall',
	'-Wno-multichar',
}

CLIBRARIES = {
	'm',
}

CDEFINES = {
	'_ALL_SOURCE',
	'_REENTRANT',
	'VERSION="%VERSION%"'
}
	
CINCLUDES = {
	'src'
}

CLINKFLAGS = {
	--'-Wl,--image-base',
	--'-Wl,0x00800000'
	'-static',
}

lbw_core = cxxprogram {
	cxxfile "src/main.cc",
	cxxfile "src/utils.cc",
	cxxfile "src/ehandler.cc",
	cxxfile "src/linux_errno.cc",
	cxxfile "src/Exception.cc",
	cxxfile "src/user.cc",
	cxxfile "src/exec/ElfLoader.cc",
	cxxfile "src/exec/exec.cc",
	cxxfile "src/filesystem/FD.cc",
	cxxfile "src/filesystem/FakeDirFD.cc",
	cxxfile "src/filesystem/RealFD.cc",
	cxxfile "src/filesystem/RealFD_Ioctl.cc",
	cxxfile "src/filesystem/RealFD_Fnctl.cc",
	cxxfile "src/filesystem/file.cc",
	cxxfile "src/filesystem/termios.cc",
	cxxfile "src/filesystem/VFS.cc",
	cxxfile "src/filesystem/VFSNode.cc",
	cxxfile "src/filesystem/RootVFSNode.cc",
	cxxfile "src/filesystem/InterixVFSNode.cc",
	cxxfile "src/filesystem/DevVFSNode.cc",
	cxxfile "src/filesystem/PtsVFSNode.cc",
	cxxfile "src/filesystem/FakeVFSNode.cc",
	cxxfile "src/filesystem/FakeFile.cc",
	cxxfile "src/syscalls/_dispatch.cc",
	cxxfile "src/syscalls/_names.cc",
	cxxfile "src/syscalls/process.cc",
	cxxfile "src/syscalls/file.cc",
	cxxfile "src/syscalls/fd.cc",
	cxxfile "src/syscalls/stat.cc",
	cxxfile "src/syscalls/statfs.cc",
	cxxfile "src/syscalls/misc.cc",
	cxxfile "src/syscalls/mmap.cc",
	cxxfile "src/syscalls/memory.cc",
	cxxfile "src/syscalls/thread.cc",
	cxxfile "src/syscalls/signals.cc",
	cxxfile "src/syscalls/clone.cc",
	cxxfile "src/syscalls/time.cc",
	cxxfile "src/syscalls/sockets.cc",
	cxxfile "src/syscalls/selectpoll.cc",
	cxxfile "src/syscalls/exec.cc",
	--cfile "src/binfmt/binfmt_elf.c",
	file "ntdll.lib",
}

lbw_optimised = lbw_core {
	CBUILDFLAGS = {
		PARENT,
		'-O3',
		'-fomit-frame-pointer',
		'-ffunction-sections',
		'-fdata-sections',
	},
	CLINKFLAGS = {PARENT, "-s"},
	
	-- Don't use pm.install here because that creates a symlink, and NSIS
	-- doesn't know about symlinks.
	install = {"cp %out[1]% bin/lbw"}
}

lbw_debug = lbw_core {
	CBUILDFLAGS = {
		PARENT,
		'-O0',
		'-g'
	},
	install = pm.install("lbw")
}

busyboxshell_sh = simple {
	class = "busyboxshell_sh",
	command = {
		"dos2unix %in[1]% %out[1]%"
	},
	outputs = {"%U%-%I%/busyboxshell.sh"},
	file "extras/busyboxshell.sh",
	
	-- Don't use pm.install here because that creates a symlink, and NSIS
	-- doesn't know about symlinks.
	install = {"cp %out[1]% bin/busyboxshell.sh"}
}
	
installer = simple {
	class = "windows_installer",
	command = {
		"'%MAKENSIS%' -v2 -nocd -dVERSION=%VERSION% -dOUTFILE=%out% extras/installer.nsi"
	},
	outputs = {"%U%-%I%.exe"},
	
	file "extras/installer.nsi",
	file "extras/busybox",
	file "extras/BusyBox.txt",
	file "extras/interix.termcap",
	file "LICENSE",
	file "README",
	busyboxshell_sh,
	lbw_optimised,
	
	install = pm.install("bin/LBW %VERSION% setup.exe")	
}

default = group {
	lbw_debug,
	installer,
}

